bye()
install_from_swirl("Data Analysis")
install_from_swirl("Statistical Inference")
install.packages("Using R")
install.packages("UsingR")
library(UsingR)
?father.son
father.son
?data.frame
father.son(row.names(1))
father.son.names
father.son[1,]
?linreg
?reg
?lr
library(swirld)
library(swirl)
swirl()
range(cars$price)
61.9-7.4
var(cars)
var(cars)$price
var(cars$price)
sd(cars$price)
15
20
plo(child~parent, galton)
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent,galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
bye()
exit()
quit()
father.sons
father.son
fathers.sons
library("UsingR")
movies
father.son
tallsons <- father.son$fheight[>71.0]
tallsons <- subset(father.son$fheight > 71.0)
tallsons <- subset(father.son, fheight > 71.0)
tallsons
tallsons <- subset(father.son, fheight == round(71))
tallsons
tallsons <- subset(father.son, round(fheight) == (71))
tallsons
mean(tallsons$fheight)
mean(tallsons$sheight)
tallfathers <- subset(father.son, round(fheight) == (71))
rm(tallsons)
galton
galton
galton[1,]
?galton
data(father.son)
father.son
?promise
quit()
install.packages("rafalib")
install.packages("Rtools")
install.packages("devtools")
library('devtools')
install.packages("Rtools")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
library("swirl")
swirl()
install.packages(c("BH", "boot", "class", "cluster", "crayon", "curl", "DBI", "devtools", "dplyr", "evaluate", "foreign", "ggplot2", "git2r", "gridExtra", "gtable", "HistData", "Hmisc", "httr", "installr", "jsonlite", "latticeExtra", "lazyeval", "MASS", "Matrix", "mgcv", "mime", "munsell", "nlme", "nnet", "openssl", "plyr", "Rcpp", "RCurl", "rstudioapi", "scales", "spatial", "stringi", "survival", "swirl", "testthat", "withr", "xml2"))
install.packages(c("boot", "class", "cluster", "foreign", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial", "survival"))
quit()
libraries("swirl")
library("swirl")
rm(list=ls())
swirl()
quit()
install.packages(c("boot", "class", "cluster", "curl", "DBI", "digest", "foreign", "jsonlite", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "R6", "Rcpp", "rversions", "spatial", "stringr", "survival", "tibble"))
update.packages()
download.packages("Microsoft Open R")
download.packages("Microsoft Open R", destdir= "C:\Users\Christopher\AppData\Local\Temp\RtmpuAG1rb\downloaded_packages")
download.packages(pkg="Microsoft Open R", destdir= "C:\Users\Christopher\AppData\Local\Temp\RtmpuAG1rb\downloaded_packages")
update.packages()
quit()
install.packages("ggplot2")
update.packages()
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
install.packages('RColorBrewer', dependencies = TRUE)
library(RColorBrewer)
update.packages(ask = False)
update.packages(ask = false)
update.packages(ask = FALSE)
library()
install.packages('swirl')
.libPaths()
.Library
remove.packages()
remove.packages('tools')
swirl()
library(swirl)
swirl()
swirl()
install_course('Getting and Cleaning Data')
install_course('Statistical Inference')
mean(cars$mpgCity)
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "YOUR_NAME")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
mtcars
mtcars.fields
mtcards.names
mtcards[1]
mtcars[1]
mtcars[,1]
names(mtcars)
mean(mtcars$mpg)
?trim
??trim
mean(1:10, trim=1)
mean(1:10)
mean(1:10, trim=.1)
mean(1:10, trim=.100)
mean(1:10, trim=3)
mean(c(1,2,-1))
mean(c(1,2,-1), trim=.1)
mean(c(1,2,-1), trim=.10)
mean(c(1,2,-1), trim=1)
mean(c(1,2,-1), trim=0.1)
mean(c(1,2,-1), trim=3)
mean(c(1,2,-1), trim=0.66)
```{r}
{r}
summary(mtcars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23]
efficient <- mtcars[,mtcars$mpg >= 23]
efficient <- mtcars[:,mtcars$mpg >= 23]
efficient <- subset(mtcars, mpg >= 23)
dim(efficient)
dim(efficient)[1,1]
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
efficient
length(efficient)
nrows(efficient)
row(efficient)
nrow(efficient)
mtcars[mtcars$qsec <= 16.90]
mtcars[mtcars$qsec <= 16.90,]
lightCars <- mtcars[mtcars$wt < 2.000,'qsec']
lightCars
)
lightCars <- mtcars[mtcars$wt < 2.000,]
nrow(lightCars)
lightCars
mtcars$year <- 1974
View(mtcars)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient[,1]
index(mtcars)
names(x = mtcars)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
row.names(efficient)
efficient <- subset(mtcars, mpg >= 30 | hp < 60)
row.names(efficient)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
ggsave("diamonds_center_hist.jpeg")
quit(save=T)
.libPaths()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
.libPaths()
.libPaths(new = "C:/Program Files/R/R-3.2.2/library")
.libPaths()
?library
update.packages("R")
.libPaths()
.libPaths("C:/Program Files/R/R-3.2.2/library")
library("acepack", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("chron", lib.loc="C:/Program Files/R/R-3.1.3/library")
remove.packages("chron", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("acepack", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("bitops", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("colorspace", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("crayon", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("curl", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("data.table", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("dichromat", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("devtools", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("digest", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("evaluate", lib="C:/Program Files/R/R-3.1.3/library")
# Chunk 1: Pseudo-Facebook User Data
library(ggplot2)
library(dplyr, tidyr)
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA/eda-course-materials/")
pfd <- read.csv("pseudo_facebook.tsv", sep = "\t")
# Chunk 2: Scatterplots
ggplot(aes(x = age, y = friend_count), data = pfd) +
geom_jitter(alpha=1/20) + xlim(c(13,90))
# Chunk 3: ggplot Syntax
ggplot(aes(x = age, y = friend_count), data = pfd) +
geom_jitter(alpha=1/20) + xlim(c(13,90))
# Chunk 4: Overplotting
ggplot(aes(x = age, y = friend_count), data = pfd) +
geom_jitter(alpha=1/20) + xlim(c(13,90))
# Chunk 5: Coord_trans()
ggplot(aes(x = age, y = friend_count), data = pfd) +
geom_point(alpha=1/20) + xlim(c(13,90)) +
coord_trans(y="sqrt")
# Chunk 6
ggplot(aes(x = age, y = friend_count), data = pfd) +
geom_point(alpha=1/20) + xlim(c(13,90)) +
coord_trans(y="sqrt")
# Chunk 7: Conditional Means
agegroups = group_by(pfd, age)
pfd.fc_by_age = summarize(agegroups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n=n())
pfd.fc_by_age = arrange(pfd.fc_by_age, age)
# Chunk 8: Conditional Means thru Chaining
pfd.fc_by_age <- group_by(pfd, age) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n=n()) %>% arrange(age)
# Chunk 9: Conditional Means Plot
ggplot(aes(x = age, y = friend_count_mean), data = pfd.fc_by_age) +
geom_line()
# Chunk 10: Overlaying Summaries with Raw Data
ggplot(aes(x = age, y = friend_count), data = pfd) +
geom_point(position = position_jitter(h=0),
alpha=1/20,
color='orange') +
coord_cartesian(xlim = c(13, 90)) +
geom_line(stat='summary', fun.y=mean) +
geom_line(stat='summary', fun.y=median, linetype=2) +
geom_line(stat="summary", fun.y=quantile,
fun.args = list(probs = .9),
color="blue" ) +
geom_line(stat="summary", fun.y=quantile,
fun.args = list(probs = .1), linetype=2, color="blue")
# Chunk 11: Correlation using the with function
with(pfd, cor.test(age, friend_count, method='pearson'))
# Chunk 12: Correlation on Subsets
# Chunk 13
ggplot(data=pfd, aes(x=www_likes_received, y=likes_received)) +
geom_point() + xlim(0, quantile(pfd$likes_received, 0.95)) +
ylim(0, quantile(pfd$www_likes_received, 0.95)) +
geom_smooth(method = 'lm', color = 'red')
# Chunk 14: Strong Correlations
with(subset(pfd, age <= 70),
cor.test(www_likes_received, likes_received))
# Chunk 15: Correlation Calcuation
with(pfd, cor.test(www_likes_received, likes_received))
# Chunk 16: More Caution With Correlation
library(alr3)
data(Mitchell)
# Chunk 17: Temp vs Month
ggplot(data=Mitchell, aes(x=Month, y=Temp)) + geom_point()
# Chunk 18: Noisy Scatterplots
cor.test(Mitchell$Month, Mitchell$Temp)
# Chunk 19: Making Sense of Data
ggplot(data=Mitchell, aes(x=Month%%12, y=Temp)) + geom_point() +
scale_x_continuous(breaks=seq(0,203,12))
Mitchell$stdmonth <- Mitchell$Month%%12
by_month <- group_by(Mitchell, stdmonth)
mthlymeans <- by_month %>% summarize(mean_temp = mean(Temp))
# Chunk 20: Understanding Noise: Age to Age Months
pfd$age_with_months <- pfd$age + (1-pfd$dob_month/12)
head(pfd$age_with_months,10)
# Chunk 21: Age with Months Means
pfd.fc_by_age_months = pfd %>%
group_by(age_with_months) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median= median(friend_count),
n = n()) %>%
arrange(age_with_months)
# Chunk 22: Programming Assignment
# Chunk 23: Noise in Conditional Means
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=n)) +
geom_point()
# Chunk 24: Smoothing Conditional Means
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_point()
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_point() +
xlim(breaks=seq(0,840, 12))
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_point() +
xlim(c(0,840))
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_point() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age_months, aes(x=round(age_with_months/5)*5, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age_months, aes(x=round(age/5)*5, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age, aes(x=round(age/5)*5, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd, aes(x=round(age/5)*5, y=friend_count)) +
geom_line(fun.y="mean") +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd, aes(x=round(age/5)*5, y=friend_count)) +
geom_line(fun.y=mean) +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
ggplot(data=pfd, aes(x=round(age/5)*5, y=friend_count)) +
geom_line(stat="summary", fun.y=mean) +
geom_smooth() +
xlim(c(13,71))
library(gridExtra)
grid.arrange(p1,p2)
library(gridExtra)
p1 = ggplot(data=pfd.fc_by_age_months, aes(x=age_with_months, y=friend_count_mean)) +
geom_line() +
geom_smooth() +
xlim(c(13,71))
p2 = ggplot(data=pfd, aes(x=round(age/5)*5, y=friend_count)) +
geom_line(stat="summary", fun.y=mean) +
geom_smooth() +
xlim(c(13,71))
grid.arrange(p1,p2)
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr, tidyr)
library(ggplot2)
data(diamonds)
summary(diamonds)
names(diamonds)
ggplot(aes(x = price, y = x), data=diamonds) +
geom_point()
?diamonds
select(diamonds, x == 0)
select(diamonds$x == 0)
diamonds$x == 0
diamonds[diamonds$x == 0]
diamonds[,diamonds$x == 0]
diamonds[diamonds$x == 0,]
diamonds %>% cor.test(price, x, method = "spearman")
cor.test(diamonds$price, diamonds$x, method = "spearman")
cor.test(diamonds$price, diamonds$x, method = "spearman")
cor.test(diamonds$price, diamonds$y, method = "spearman")
cor.test(diamonds$price, diamonds$z, method = "spearman")
cor.test(diamonds$price, diamonds$x, method = "spearman")
cor.test(diamonds$price, diamonds$y, method = "spearman")
cor.test(diamonds$price, diamonds$z, method = "spearman")
cor.test(diamonds$price, diamonds$x)
cor.test(diamonds$price, diamonds$y)
cor.test(diamonds$price, diamonds$z)
ggplot(aes(x = price, y = depth), data=diamonds) +
geom_point()
ggplot(aes(x = price, y = depth), data=diamonds) +
geom_point(alpha=.01)
ggplot(aes(x = price, y = depth), data=diamonds) +
geom_point(alpha=.01) +
scale_x_continuous(breaks=seq(0, max(depth), depth/(sum(depth))))
ggplot(aes(x = price, y = depth), data=diamonds) +
geom_point(alpha=.01) +
scale_x_continuous(breaks=seq(0, max(diamonds$depth), diamonds$depth/(sum(diamonds$depth))))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.01) +
scale_x_continuous(breaks=seq(0, max(diamonds$depth), diamonds$depth/(sum(diamonds$depth))))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.01) +
scale_x_continuous(breaks=seq(55,65,2))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.01) +
xlim(c(55,65,2))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.01) +
xlim(c(55,65))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.01) +
xlim(c(58,64))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.05) +
xlim(c(58,64))
ggplot(aes(x = depth, y = price), data=diamonds) +
geom_point(alpha=.05) +
xlim(c(58,65))
cor.test(diamonds$price, diamonds$depth)
quantile(diamonds$price, .9)
subset(diamonds, price <= quantile(diamonds$price, .99))
ggplot(aes(x = carat, y = price), data=subset(diamonds, price < quantile(diamonds$price, .99) & carat < quantile(diamonds$price, .99))) +
geom_point(alpha=.05) +
xlim(c(58,65))
ggplot(aes(x = carat, y = price),
data=subset(diamonds, price < quantile(price, .99) & carat < quantile(diamonds$price, .99))) +
geom_point(alpha=.05) +
ggplot(aes(x = carat, y = price),
data=subset(diamonds, price < quantile(price, .99) & carat < quantile(diamonds$price, .99))) +
geom_point(alpha=.05)
ggplot(aes(x = carat, y = price),
data=subset(diamonds, price < quantile(price, .99) & carat < quantile(diamonds$price, .99))) +
geom_point(alpha=.05)
ggplot(aes(x = carat, y = price),
data=subset(diamonds, price < quantile(price, .99) & carat < quantile(price, .99))) +
geom_point(alpha=.05)
diamonds$volume = diamonds$x*diamonds$y*diamonds*z
diamonds$volume = diamonds$x*diamonds$y*diamonds$z
diamonds$volume = diamonds$x*diamonds$y*diamonds$z
ggplot(aes(x = volume, y = price), data=diamonds) +
geom_point(alpha=.05)
ggplot(aes(x = volume, y = price), data=diamonds) +
geom_point(alpha=.05) +
xlim(c(0, 500))
cor.test(diamonds, volume, price)
cor.test(diamonds$volume, diamonds$price)
count(diamonds$volume == 0)
library(plyr)
count(diamonds$volume == 0)
detach("package:plyr", unload=TRUE)
cor.test(subset(diamonds,volume==0 | volume >8000, diamonds$price)
```
cor.test(subset(diamonds,volume==0 | volume >8000)$volume, diamonds$price)
for_cor = subset(diamonds,volume==0 | volume >8000)
cor.test(for_cor$volume, for_cor$price)
for_cor = subset(diamonds,volume!=0 | volume >8000)
cor.test(for_cor$volume, for_cor$price)
for_cor = subset(diamonds, volume!=0 | volume < 800)
cor.test(for_cor$volume, for_cor$price)
for_cor = subset(diamonds, volume>0 & volume <= 800)
cor.test(for_cor$volume, for_cor$price)
ggplot(aes(x = volume, y = price), data=diamonds) +
geom_point(alpha=.01) +
xlim(c(0, 500))
