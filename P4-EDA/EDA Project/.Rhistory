remove.packages("devtools", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("digest", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("evaluate", lib="C:/Program Files/R/R-3.1.3/library")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
data(diamonds)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
facet_wrap(~color)
?cut
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price))) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
View(diamonds)
ggplot(data=diamonds, aes(x=log(price), y=table) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut))
table(diamonds)
table(diamonds$color)
table(diamonds$price)
ggplot(data=diamonds, aes(x=price, y=table)) +
geom_point(aes(color=cut))
table(diamonds$cut)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue")
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), Strok = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 4)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 10)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~year)
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(. ~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cyl .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cyl .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
library(swirl)
library("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
plot(child~parent, galton)
plot(jitter(child, 4) ~ parent, galton)
lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
install_course("Getting and Cleaning Data")
swirl()
0
quit()
getOption(libpath)
getOption("libpath")
getOption("libPath")
fnc <- function () { y = 10 }
y=5
fnc <- function () { y = 10 }
fnc <- function () { y = 10 return(y)}
fnc <- function () { y = 10; return(y)}
y
fnc()
y
fnc <- function () { y <- 10; return(y)}
y
y <-  5
fnc <- function () {return(y)}
fnc
install.packages(dplyr)
y <- 10
f <- function(x) { y <- 3; 2*y + g(x)}
g <- function(x) {3*x}
f(3)
g <- function(x) {x*y}
f(3)
f <- function(x) { y <- 2; 2*y + g(x)}
f(3)
install.packages("memisc")
install.packages(dplyr)
install.packages("dplyr")
install.packages(c("acs", "curl", "dplyr", "git2r", "igraph", "modelr"))
version
update.packages("R")
update.packages(r)
update.packages(R)
update.packages('r')
version
install.packages(c("choroplethr", "tidyverse", "dpylr"), dependencies = T)
install.packages(c("choroplethr", "tidyverse", "dpylr"), dependencies = TRUE)
install.packages(c("choroplethr", "tidyverse", "dpylr"))
install.packages("choroplethr", "tidyverse", "dpylr")
install.packages("choroplethr")
install.packages(c("choroplethr", "dplyr", "tidyverse"))
install.packages(c("choroplethr", "dplyr", "tidyverse"))
install.packages('acs')
install.packages('acs', TRUE)
pkgs <- as.data.frame(installed.packages(), stringsAsFactors = FALSE, row.names = FALSE)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("stringdist")
version
pkgs <- as.data.frame(installed.packages(), stringsAsFactors = FALSE, row.names = FALSE)
pkgs
View(pkgs)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("stringdist")
library(tidyverse)
library(gridExtra)
library(choroplethr)
library(data.table)
library(GGally)
library(car)
install.packages("choroplethr", dependencies = TRUE)
install.packages(c("backports", "bayesplot", "checkmate", "crayon", "forecast", "PKI", "rgdal", "rgeos"))
dbinom(6, 9, .5)
dbinom(6, 9, .7)
data(cars)
cars
library(dplyr)
?mutate
View(cars)
mutate(cars, speed = speed / 4)
install.packages(c("acs", "backports", "checkmate", "colourpicker", "curl", "doParallel", "dplyr", "forecast", "irlba", "lme4", "memisc", "purrr", "quantmod", "Rcpp", "RcppArmadillo", "rex", "rgdal", "rgeos", "tidyr", "tidyselect"))
library(tidyr)
View(pkgs)
devtools::install_github("hadley/r4ds")
devtools::install_github("hadley/r4ds")
install.packages('ggrepel')
devtools::install_github("hadley/r4ds")
library(r4ds)
help(r4ds)
remove.packages(alr3)
remove.packages('alr3')
library(devtools)
install_github("OpenIntroOrg/openintro-r-package", subdir = "openintro")
libary(openintro)
library(openintro)
library(nycflights13)
library(tidyverse)
flights
View(flights)
filter(flights, dep_delay > 10)
filter(flights, dep_delay > 100)
filter(flights, dep_delay > 360)
filter(flights, dep_delay > 360) %>% group_by('month') %>% summarise()
filter(flights, dep_delay > 360) %>% group_by('month') %>% summarise(mean)
filter(flights, dep_delay > 360) %>% group_by('month') %>% summarise(mean = 'mean')
filter(flights, dep_delay > 360) %>% group_by('month') %>% summarise(mean = mean)
filter(flights, dep_delay > 360) %>% group_by('month') %>% summarise(mean = "mean")
filter(flights, dep_delay > 360) %>% group_by('month')$arr_time %>% summarise(mean = "mean")
filter(flights, dep_delay > 360) %>% group_by('month') %>% summarise(mean = "mean")
filter(flights, dep_delay > 360) %>% group_by(month) %>% summarise(mean = "mean")
filter(flights, dep_delay > 360) %>% group_by(month) %>% summarise(mean = mean())
filter(flights, dep_delay > 360) %>% group_by(month) %>% summarise(mean(dep_delay))
flights %>% group_by(month) %>% summarise(mean(dep_delay))
update.packages()
flights
library(nycflights13)
flights
library(nycflights13)
summary(flights)
library(tidyverse)
library(tidyverse)
library(tidyverse)
update.packages(ask = FALSE)
library(dplyr)
install.packages('glue')
library(tidyverse)
install.packages('lazyeval')
library(tidyverse)
library(nycflights13)
library(tidyverse)
summary(flights)
(late <- filter(flights, arr_delay >= 2))
filter(flights, dest %in% c('IAH', 'HOU'))
filter(flights, carrier %in% c('United', 'American', 'Delta'))
filter(flights, carrier %in% c('UA', 'AA', 'DL'))
filter(flights, arr_delay >= 2 & dep_delay ==0)
filter(flights, arr_delay <= -30 & dep_delay >= 1)
filter(flights, between(dep_time, 600, 2400))
filter(flights, is.na(dep_time))
NA
NA*0
NA^0
'a'^1
FALSE & FALSE
FALSE & 1
TRUE & 1
TRUE & 0
FALSE & NA
FALSE & 50
FALSE == 50
arrange(flights, desc(is.na(flights)))
arrange(flights, desc(is.na()))
arrange(flights, desc())
arrange(flights, month, is.na())
arrange(flights, is.na(month))
arrange(flights, is.na(arr_delay))
arrange(flights, desc(is.na(arr_delay)))
install.packages(c("geosphere", "hunspell", "lubridate", "openssl", "rlang"))
library(curl)
strm <- curl("wwwmobile.caiso.com/Web.Service.Chart/api/v3/ChartService/PriceContourMap1")
readlines(strm, 10)
readline(strm, 10)
readLines(strm, 10)
install.packages(c("broom", "car", "covr", "devtools", "geosphere", "hms", "lintr", "memisc", "openssl", "raster", "Rcpp", "RcppEigen", "rgdal", "rlang", "rmarkdown", "stringi", "tidyselect", "tidyverse", "timeDate"))
install.packages(c("backports", "curl", "digest", "foreach", "git2r", "htmlTable", "hunspell", "iterators", "knitr", "lme4", "MASS", "memisc", "quantmod", "RcppArmadillo", "RCurl", "registry", "reshape2", "rlang", "rprojroot", "rstan", "rstanarm", "rstantools", "StanHeaders", "testthat", "tibble", "withr", "xts", "yaml"))
install.packages(c("dbplyr", "git2r", "Hmisc", "irlba", "microbenchmark", "RCurl", "rprojroot", "sf", "shinyjs", "sp", "tigris", "units", "utf8", "viridis", "zoo"))
library("rversions", lib.loc="~/R/win-library/3.4")
install.packages('xgboost')
R
version
library(UpdateR)
install.packages('UpdateR')
library(UpdateR)
install.packages("R")
library("installr", lib.loc="~/R/win-library/3.4")
installr()
library(installR)
library(installr)
installr()
installr()
Version
version
install.packages("sp")
library(tidyr)
dplyr::transmute()
quit()
Version()
version
install.packages(c("DT", "hms", "htmlTable", "htmlwidgets", "matrixStats", "microbenchmark", "Rcpp", "rstan", "StanHeaders", "tibble", "TTR", "xgboost", "xml2"))
gamma
gamma(1)
gamma(2)
gamma(3)
gamma(4)
gamma(16)
expected_2d_random_walk <- function(steps) {
d <- 2;
return (sqrt(2*steps/d))*gamma((d+1)/2)/gamma(d/2);
}
expected_2d_random_walk(16)
expected_2d_random_walk(64)
gamma(1/2)
gamma(128)
gamma(1)
gamma(2)
gamma(3)
install.packages(c("bookdown", "callr", "digest", "DT", "knitr", "mvtnorm", "openssl", "quantreg", "reprex", "tidyr", "viridis", "viridisLite"))
expected_6d_random_walk <- function(steps) {
d <- 6;
return (sqrt(2*steps/d))*gamma((d+1)/2)/gamma(d/2);
}
expected_2d_random_walk(16)
expected_2d_random_walk(64)
expected_6d_random_walk(16)
expected_6d_random_walk(64)
expected_hex_random_walk <- function(steps) {
d <- 3;
return (sqrt(2*steps/d))*gamma((d+1)/2)/gamma(d/2);
expected_hex_random_walk(64)
}
expected_hex_random_walk <- function(steps) {
d <- 3;
return (sqrt(2*steps/d))*gamma((d+1)/2)/gamma(d/2);
}
expected_hex_random_walk(64)
expected_hex_random_walk(16)
View(expected_2d_random_walk)
View(expected_hex_random_walk)
expected_random_walk <- function(steps) {
d <- 2;
return (sqrt(2*steps/d))*gamma((d+1)/2)/gamma(d/2);
expected_random_walk <- function(steps) {
d <- 2;
return (sqrt(2*steps/d))*gamma((d+1)/2)/gamma(d/2);
}
}
expected_2d_random_walk(64)
install.packages(c("BH", "bookdown", "callr", "dbplyr", "devtools", "forcats", "httpuv", "knitr", "lubridate", "MASS", "matrixStats", "pillar", "pryr", "RcppEigen", "rlang", "rstanarm", "stringr", "tidyselect", "timeDate", "tseries", "XML", "yaml"))
install.packages(c("acs", "DBI", "httpuv", "openssl", "RcppArmadillo", "rmarkdown", "selectr"))
setwd("c:/users/christopher/desktop/nanodegree/p4-eda/eda project")
library(tidyverse)
library(gridExtra)
library(choroplethr)
library(data.table)
library(GGally)
library(car)
variables = c("ProsperScore",
"ProsperRating..Alpha.",
"BorrowerAPR",
"BorrowerRate",
"LenderYield",
"IsBorrowerHomeowner",
"IncomeRange",
"StatedMonthlyIncome",
"DebtToIncomeRatio",
"MonthlyLoanPayment",
"LoanOriginalAmount",
"AmountDelinquent",
"BorrowerState",
"LoanStatus",
"CreditScoreRangeUpper",
"CreditScoreRangeLower")
loans <- read.csv("prosperLoanData.csv", na.strings=c("",".","NA"))[variables]
library(descr)
install.packages('descr')
library(descr)
CrossTable(loans$ProsperScore, loans$LoanStatus)
valid_statuses <- c("Completed", "Current", "Chargedoff", "Defaulted")
loans_with_status <- subset(loans, LoanStatus %in% valid_statuses)
ggplot(data=loans_with_status,
aes(x = LoanStatus, y = DebtToIncomeRatio))+
geom_boxplot() +
scale_y_continuous(limits = c(0.0, 1.5))
CrossTable((loans_with_status$ProsperScore, loans_with_status$IncomeRange))
CrossTable(loans_with_status$ProsperScore, loans_with_status$IncomeRange)
CrossTable(loans_with_status$ProsperRating..Alpha., loans_with_status$IncomeRange)
CrossTable(loans_with_status$ProsperRating..Alpha., loans_with_status$IncomeRange, prop.c=FALSE, prop.chisq=FALSE, prop.t=FALSE)
facet_wrap("ZipCode")
delinquency_types <- levels(loans$LoanStatus)[c(5, 7:12)]
late_or_defaulted_loans <- filter(loans, LoanStatus %in% delinquency_types)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_density(color="red") +
xlim(300, 850)
loans$AverageCredit <- round((loans$CreditScoreRangeUpper +
loans$CreditScoreRangeLower)/2)
loans <- loans[-15:-16]
delinquency_types <- levels(loans$LoanStatus)[c(5, 7:12)]
late_or_defaulted_loans <- filter(loans, LoanStatus %in% delinquency_types)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_density(color="red") +
xlim(300, 850)
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(ProsperRating..Alpha.))
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(ProsperRating..Alpha.)
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(loans$ProsperRating..Alpha.)
)
)
}
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~ProsperRating..Alpha.))
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~ProsperRating..Alpha.)
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~loans$ProsperRating..Alpha.)
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~ProsperRating..Alpha.))
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~ProsperRating..Alpha.)
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~ProsperRating..Alpha.))
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue") +
facet_wrap(~ProsperRating..Alpha.)
ggplot(subset(loans, LoanStatus %in% c(98188, 98105, 98108, 98126)),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue")
ggplot(subset(loans, LoanStatus %in% valid_statuses),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() +
scale_fill_gradient( low="white", high="blue")
ggplot(subset(loans, LoanStatus %in% valid_statuses),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() + ylim(c(10000))
scale_fill_gradient( low="white", high="blue")
ggplot(subset(loans, LoanStatus %in% valid_statuses),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() + ylim(c(0,10000))
scale_fill_gradient( low="white", high="blue")
ggplot(subset(loans, LoanStatus %in% valid_statuses),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() + ylim(c(0,20000))
scale_fill_gradient( low="white", high="blue")
ggplot(subset(loans, LoanStatus %in% valid_statuses),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() + ylim(c(0,30000))
scale_fill_gradient( low="white", high="blue")
ggplot(subset(loans, LoanStatus %in% valid_statuses),
aes(x=DebtToIncomeRatio, y=AmountDelinquent)) +
stat_binhex(colour="white") +
theme_bw() + ylim(c(0,90000))
scale_fill_gradient( low="white", high="blue")
