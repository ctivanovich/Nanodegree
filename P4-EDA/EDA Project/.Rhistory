quit()
install.packages("rafalib")
install.packages("Rtools")
install.packages("devtools")
library('devtools')
install.packages("Rtools")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
library("swirl")
swirl()
install.packages(c("BH", "boot", "class", "cluster", "crayon", "curl", "DBI", "devtools", "dplyr", "evaluate", "foreign", "ggplot2", "git2r", "gridExtra", "gtable", "HistData", "Hmisc", "httr", "installr", "jsonlite", "latticeExtra", "lazyeval", "MASS", "Matrix", "mgcv", "mime", "munsell", "nlme", "nnet", "openssl", "plyr", "Rcpp", "RCurl", "rstudioapi", "scales", "spatial", "stringi", "survival", "swirl", "testthat", "withr", "xml2"))
install.packages(c("boot", "class", "cluster", "foreign", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial", "survival"))
quit()
libraries("swirl")
library("swirl")
rm(list=ls())
swirl()
quit()
install.packages(c("boot", "class", "cluster", "curl", "DBI", "digest", "foreign", "jsonlite", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "R6", "Rcpp", "rversions", "spatial", "stringr", "survival", "tibble"))
update.packages()
download.packages("Microsoft Open R")
download.packages("Microsoft Open R", destdir= "C:\Users\Christopher\AppData\Local\Temp\RtmpuAG1rb\downloaded_packages")
download.packages(pkg="Microsoft Open R", destdir= "C:\Users\Christopher\AppData\Local\Temp\RtmpuAG1rb\downloaded_packages")
update.packages()
quit()
install.packages("ggplot2")
update.packages()
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
install.packages('RColorBrewer', dependencies = TRUE)
library(RColorBrewer)
update.packages(ask = False)
update.packages(ask = false)
update.packages(ask = FALSE)
library()
install.packages('swirl')
.libPaths()
.Library
remove.packages()
remove.packages('tools')
swirl()
library(swirl)
swirl()
swirl()
install_course('Getting and Cleaning Data')
install_course('Statistical Inference')
mean(cars$mpgCity)
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "YOUR_NAME")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
mtcars
mtcars.fields
mtcards.names
mtcards[1]
mtcars[1]
mtcars[,1]
names(mtcars)
mean(mtcars$mpg)
?trim
??trim
mean(1:10, trim=1)
mean(1:10)
mean(1:10, trim=.1)
mean(1:10, trim=.100)
mean(1:10, trim=3)
mean(c(1,2,-1))
mean(c(1,2,-1), trim=.1)
mean(c(1,2,-1), trim=.10)
mean(c(1,2,-1), trim=1)
mean(c(1,2,-1), trim=0.1)
mean(c(1,2,-1), trim=3)
mean(c(1,2,-1), trim=0.66)
```{r}
{r}
summary(mtcars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23]
efficient <- mtcars[,mtcars$mpg >= 23]
efficient <- mtcars[:,mtcars$mpg >= 23]
efficient <- subset(mtcars, mpg >= 23)
dim(efficient)
dim(efficient)[1,1]
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
efficient
length(efficient)
nrows(efficient)
row(efficient)
nrow(efficient)
mtcars[mtcars$qsec <= 16.90]
mtcars[mtcars$qsec <= 16.90,]
lightCars <- mtcars[mtcars$wt < 2.000,'qsec']
lightCars
)
lightCars <- mtcars[mtcars$wt < 2.000,]
nrow(lightCars)
lightCars
mtcars$year <- 1974
View(mtcars)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient[,1]
index(mtcars)
names(x = mtcars)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
row.names(efficient)
efficient <- subset(mtcars, mpg >= 30 | hp < 60)
row.names(efficient)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
ggsave("diamonds_center_hist.jpeg")
quit(save=T)
.libPaths()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
.libPaths()
.libPaths(new = "C:/Program Files/R/R-3.2.2/library")
.libPaths()
?library
update.packages("R")
.libPaths()
.libPaths("C:/Program Files/R/R-3.2.2/library")
library("acepack", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("chron", lib.loc="C:/Program Files/R/R-3.1.3/library")
remove.packages("chron", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("acepack", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("bitops", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("colorspace", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("crayon", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("curl", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("data.table", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("dichromat", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("devtools", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("digest", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("evaluate", lib="C:/Program Files/R/R-3.1.3/library")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
data(diamonds)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
facet_wrap(~color)
?cut
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price))) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
View(diamonds)
ggplot(data=diamonds, aes(x=log(price), y=table) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut))
table(diamonds)
table(diamonds$color)
table(diamonds$price)
ggplot(data=diamonds, aes(x=price, y=table)) +
geom_point(aes(color=cut))
table(diamonds$cut)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue")
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), Strok = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 4)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 10)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~year)
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(. ~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cyl .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cyl .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
library(swirl)
library("swirl")
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
plot(child~parent, galton)
plot(jitter(child, 4) ~ parent, galton)
lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
install_course("Getting and Cleaning Data")
swirl()
0
quit()
# Chunk 1
knitr::opts_chunk$set(echo = F, warning = F, message = F, fig.width = 7, fig.align = "center", out.width = "80%", fig.height = 6)
# Chunk 2: loading libraries and data
library(tidyverse)
library(gridExtra)
library(choroplethr)
library(data.table)
library(GGally)
options(width = 120)
setwd("c:/users/christopher/desktop/nanodegree/p4-eda/eda project")
loans <- read.csv("prosperLoanData.csv", na.strings=c("",".","NA"))
loans_sub <- loans[,c("ProsperScore","ProsperRating..Alpha.","BorrowerAPR",
"BorrowerRate", "LenderYield", "IsBorrowerHomeowner","IncomeRange",
"StatedMonthlyIncome","DebtToIncomeRatio", "MonthlyLoanPayment",
"LoanOriginalAmount", "AmountDelinquent", "BorrowerState",
"ProsperPrincipalOutstanding")]
loans_sub$AverageCredit <- (loans$CreditScoreRangeUpper + loans$CreditScoreRangeLower)/2
attach(loans_sub)
# Chunk 3: Data Structure
str(loans_sub)
summary(loans_sub)
# Chunk 4
#we make a data.table for easy joining with the state data set
state_totals <- data.table(group_by(loans_sub, BorrowerState) %>%
dplyr::summarize(n()))
state_totals <- state_totals[!is.na(state_totals$BorrowerState),] #removing the NA row
state_totals <- state_totals[-8,] #removing DC, which is too difficult to convert
# joining a state name column on a common name for the abb column
names(state_totals)[1:2] <- c("state.abb","value")
state_totals <- inner_join(state_totals, data.table(state.name, state.abb))
names(state_totals)[3] <- c("region")
state_totals$region <- tolower(state_totals$region)
#Make the map
state_choropleth(state_totals, title = "Number of Loans per State (Borrower-Reported)", legend = "Number of Loans", num_colors = 1)
#because the chloroplethr package masks dplyr, we unload it to avoid conflicts later
#we also drop data.table just 'cuz
unloadNamespace(choroplethr)
unloadNamespace(data.table)
# Chunk 5
par(las=2, mar = c(10, 4, 2, 2), cex.axis = 0.8)
boxplot(LoanOriginalAmount ~ BorrowerState, loans_sub, range=0, ylab =
"Loan Original Amounts")
#Code adapted from an example in Roger Peng's "The Art of Data Science", pg. 48.
# Chunk 6
na_count <-sapply(loans_sub, function(y) sum(length(which(is.na(y)))))
data.frame(round(na_count/nrow(loans_sub), 4))
#NA counting lambda code courtesty of Stack Overflow:
# https://stackoverflow.com/questions/24027605/determine-the-number-of-na-values-in-a-column
# Chunk 7: PropserScores Hist
q1 <- qplot(data=loans_sub, x=ProsperScore, geom = "bar")
q2 <- qplot(data=loans_sub, x=ProsperRating..Alpha., geom="bar")
grid.arrange(q1, q2, ncol=1)
# Chunk 8: DebtIncomeRatio
ggplot(data=loans_sub, aes(x=DebtToIncomeRatio)) +
geom_histogram(binwidth=.01)
# Chunk 9
summary(loans_sub[which(loans_sub$DebtToIncomeRatio==10.01),]
[,c("ProsperScore","ProsperRating..Alpha.", "IncomeRange",
"StatedMonthlyIncome","DebtToIncomeRatio", "MonthlyLoanPayment",
"LoanOriginalAmount")])
# Chunk 10
nrow(loans_sub[which(loans_sub$DebtToIncomeRatio>=10.01),])
# Chunk 11
sort(table(subset(loans_sub, DebtToIncomeRatio>10)$IncomeRange),decreasing = T)
# Chunk 12
ggplot(data=loans_sub, aes(x=DebtToIncomeRatio)) +
geom_histogram(binwidth=.01) +
coord_cartesian(xlim=c(0.1, 1.0))
# Chunk 13
ggplot(data=loans_sub, aes(x=IncomeRange)) +
geom_bar(fill="grey")
# Chunk 14
ggplot(data=loans_sub) +
geom_histogram(aes(x=BorrowerRate), binwidth=.01) +
xlim(c(0.0, 0.4))
# Chunk 15
poor_saps <- subset(loans_sub, BorrowerRate >= 0.31 & BorrowerRate <=0.32)
summary(poor_saps[c("ProsperRating..Alpha.", "StatedMonthlyIncome", "BorrowerRate", "LenderYield", "AverageCredit")])
# Chunk 16
ggplot(data=loans_sub) + geom_histogram(aes(x=StatedMonthlyIncome), binwidth=1000) +
xlim(c(0, 35000))
# Chunk 17
ggplot(data=loans_sub) +
geom_histogram(aes(x=ProsperScore), stat="count") +
facet_wrap(~ ProsperRating..Alpha.)
# Chunk 18
table(ProsperScore, ProsperRating..Alpha.)
# Chunk 19: Interest Types over Rating
ggplot(data=subset(loans_sub, !is.na(ProsperRating..Alpha.)),
aes(x=BorrowerRate, y=BorrowerAPR)) +
geom_smooth(aes(color=ProsperRating..Alpha.))
# Chunk 20
ggplot(data=subset(loans_sub, !is.na(ProsperRating..Alpha.)),
aes(x=BorrowerRate, y=BorrowerAPR)) +
geom_smooth() +
geom_point(alpha=1/100, color = "red") +
facet_wrap(~ProsperRating..Alpha.)
# Chunk 21: Interest Rate:APR Ratio
loans_sub$APR_to_Interest <- loans_sub$BorrowerAPR/loans_sub$BorrowerRate
ggplot(data=loans_sub,aes(x=APR_to_Interest)) +
geom_histogram(bins=100) +
xlim(c(1, 1.5))
# Chunk 22
p1 <-  ggplot(data=loans_sub, aes(x = APR_to_Interest, y=StatedMonthlyIncome)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
p2 <- ggplot(data=loans_sub, aes(x=APR_to_Interest, y=LoanOriginalAmount)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
grid.arrange(p1,p2, ncol = 1)
# Chunk 23
lm(LoanOriginalAmount ~ APR_to_Interest,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest)))
lm(StatedMonthlyIncome ~ APR_to_Interest,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest)))
# Chunk 24
loans_samp <- loans_sub[sample(1:length(loans_sub$AverageCredit), 5000), ]
loans_samp <- loans_samp[, c(4:5, 8:9, 11:12, 14:15)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels = "internal")
# Chunk 25
sum(loans_sub$AmountDelinquent, na.rm = T)/sum(loans_sub$LoanOriginalAmount)
ggplot(data=loans_sub, aes(x=AverageCredit)) +
geom_line(color=loans_sub$ProsperRating..Alpha.)
ggplot(data=loans_sub, aes(y=AverageCredit)) +
geom_line(color=loans_sub$ProsperRating..Alpha.)
ggplot(data=loans_sub, aes(x=AverageCredit)) +
geom_line()
levels(loans$LoanStatus)
delinquency_types <- levels(loans$LoanStatus)[,c(5, 7:12)]
delinquency_types <- levels(loans$LoanStatus)[c(5, 7:12)]
late_or_defaulted_loans <- filter(loans,delinquency_types)
late_or_defaulted_loans <- filter(loans, LoanStatus %in% delinquency_types)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_line()
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram()
View(late_or_defaulted_loans)
loans_sub <- loans[,c("ProsperScore","ProsperRating..Alpha.","BorrowerAPR",
"BorrowerRate", "LenderYield", "IsBorrowerHomeowner","IncomeRange",
"StatedMonthlyIncome","DebtToIncomeRatio", "MonthlyLoanPayment",
"LoanOriginalAmount", "AmountDelinquent", "BorrowerState",
"ProsperPrincipalOutstanding", "LoanStatus")]
loans_sub$AverageCredit <- (loans$CreditScoreRangeUpper + loans$CreditScoreRangeLower)/2
attach(loans_sub)
delinquency_types <- levels(loans_sub$LoanStatus)[c(5, 7:12)]
late_or_defaulted_loans <- filter(loans_sub, LoanStatus %in% delinquency_types)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram()
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + abline(mean(late_or_defaulted_loans$AverageCredit))
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + abline(a=mean(late_or_defaulted_loans$AverageCredit))
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + abline(b=mean(late_or_defaulted_loans$AverageCredit))
mean(late_or_defaulted_loans$AverageCredit)
mean(late_or_defaulted_loans$AverageCredit, na.rm=T)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + scale_x_continuous(xlim=330)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + scale_x_continuous(xlim=c(330, 800))
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + scale_x_continuous(breaks=seq(300, 850, 50))
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + xlim(300)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + xlim(c(300, 900))
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram() + xlim(c(400, 900))
ggplot(data=loans_sub, aes(x=AverageCredit)) +
geom_histogram() + xlim(c(400, 900))
ggplot(data=loans_sub, aes(x=AverageCredit)) +
geom_histogram()
delinquency_types <- levels(loans_sub$LoanStatus)[c(5, 7:12)]
late_or_defaulted_loans <- filter(loans_sub, LoanStatus %in% delinquency_types)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram()
ggplot(data=loans_sub, aes(x=AverageCredit)) +
geom_histogram()
ggplot(data=loans_sub, aes(x=AverageCredit)) +
geom_histogram()
delinquency_types <- levels(loans_sub$LoanStatus)[c(5, 7:12)]
late_or_defaulted_loans <- filter(loans_sub, LoanStatus %in% delinquency_types)
ggplot(data=late_or_defaulted_loans, aes(x=AverageCredit)) +
geom_histogram()
