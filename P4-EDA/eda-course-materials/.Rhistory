remove.packages('tools')
swirl()
library(swirl)
swirl()
swirl()
install_course('Getting and Cleaning Data')
install_course('Statistical Inference')
mean(cars$mpgCity)
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "YOUR_NAME")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
mtcars
mtcars.fields
mtcards.names
mtcards[1]
mtcars[1]
mtcars[,1]
names(mtcars)
mean(mtcars$mpg)
?trim
??trim
mean(1:10, trim=1)
mean(1:10)
mean(1:10, trim=.1)
mean(1:10, trim=.100)
mean(1:10, trim=3)
mean(c(1,2,-1))
mean(c(1,2,-1), trim=.1)
mean(c(1,2,-1), trim=.10)
mean(c(1,2,-1), trim=1)
mean(c(1,2,-1), trim=0.1)
mean(c(1,2,-1), trim=3)
mean(c(1,2,-1), trim=0.66)
```{r}
{r}
summary(mtcars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23]
efficient <- mtcars[,mtcars$mpg >= 23]
efficient <- mtcars[:,mtcars$mpg >= 23]
efficient <- subset(mtcars, mpg >= 23)
dim(efficient)
dim(efficient)[1,1]
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
efficient
length(efficient)
nrows(efficient)
row(efficient)
nrow(efficient)
mtcars[mtcars$qsec <= 16.90]
mtcars[mtcars$qsec <= 16.90,]
lightCars <- mtcars[mtcars$wt < 2.000,'qsec']
lightCars
)
lightCars <- mtcars[mtcars$wt < 2.000,]
nrow(lightCars)
lightCars
mtcars$year <- 1974
View(mtcars)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient[,1]
index(mtcars)
names(x = mtcars)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
row.names(efficient)
efficient <- subset(mtcars, mpg >= 30 | hp < 60)
row.names(efficient)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
ggsave("diamonds_center_hist.jpeg")
quit(save=T)
.libPaths()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
.libPaths()
.libPaths(new = "C:/Program Files/R/R-3.2.2/library")
.libPaths()
?library
update.packages("R")
.libPaths()
.libPaths("C:/Program Files/R/R-3.2.2/library")
library("acepack", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("chron", lib.loc="C:/Program Files/R/R-3.1.3/library")
remove.packages("chron", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("acepack", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("bitops", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("colorspace", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("crayon", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("curl", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("data.table", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("dichromat", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("devtools", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("digest", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("evaluate", lib="C:/Program Files/R/R-3.1.3/library")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
data(diamonds)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
facet_wrap(~color)
?cut
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price))) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
View(diamonds)
ggplot(data=diamonds, aes(x=log(price), y=table) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut))
table(diamonds)
table(diamonds$color)
table(diamonds$price)
ggplot(data=diamonds, aes(x=price, y=table)) +
geom_point(aes(color=cut))
table(diamonds$cut)
install.packages(c("devtools", "jsonlite", "RcppArmadillo", "tibble", "tseries"))
library(datasets)
library(ggplot2)
data("diamonds")
ggplot(data=diamonds, aes(x=log(price))) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=table,y=price)) +
geom_point(aes(color=cut)) +
scale_color_brewer(type = 'qual')
ggplot(data=diamonds, aes(y=price, x=carat)) +
xlim(c(0,quantile(price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
xlim(c(0,quantile(aes(price),.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
xlim(c(0,quantile(diamonds$price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point() +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point(fill=I("#f79420")) +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point(fill=I("#f79420"), color="black") +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
```{r Scatterplot Review}
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point(fill=I("#f79420"), color="black", shape=21) +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point(fill=I("#f79420"), color=I("black"), shape=21) +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point(fill=I("#f79420"), color=I("black"), shape=21) +
geom_smooth(type='lm') +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
ggplot(data=diamonds, aes(y=price, x=carat)) +
geom_point(fill=I("#f79420"), color=I("black"), shape=21) +
geom_smooth(method='lm') +
xlim(c(0,quantile(diamonds$carat,.99))) +
ylim(c(0,quantile(diamonds$price,.99)))
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
?qplot
View(diamonds)
p1 <- qplot(data=diamonds, x=price, geom="histogram", binwidth=100)
p2 <- qplot(data=diamonds, x=price, geom="histogram", binwidth=.1) + scale_x_log10()
library(gridExtra)
library(gridExtra)
p1 <- qplot(data=diamonds, x=price, geom="histogram", binwidth=100)
p2 <- qplot(data=diamonds, x=price, geom="histogram", binwidth=.1) + scale_x_log10()
grid.arrange(p1,p2)
library(gridExtra)
p1 <- qplot(data=diamonds, x=price, binwidth=100)
p2 <- qplot(data=diamonds, x=price, binwidth=.1) + scale_x_log10()
grid.arrange(p1,p2)
p2 <- qplot(data=diamonds, x=log10(price), binwidth=.1)
grid.arrange(p1,p2)
p2 <- qplot(data=diamonds, x=log10(price), geom="line", binwidth=.1)
grid.arrange(p1,p2)
p2 <- qplot(data=diamonds, x=log10(price), binwidth=.1)
grid.arrange(p1,p2)
log10(15000)
log10(12000)
log10(1000)
log10(5000)
?log_trains
?log_trans
log_trans(10)
log_trans(10,100)
log_trans(10000)
p2 <- qplot(data=diamonds, x=price, binwidth=.1) +
scale_x_continuous(trans=log_trans(10))
grid.arrange(p1,p2)
library(gridExtra)
p1 <- qplot(data=diamonds, x=price, binwidth=100)
p2 <- qplot(data=diamonds, x=price, binwidth=.1) +
scale_x_continuous(trans=log_trans())
grid.arrange(p1,p2)
colourpicker:::colourPickerAddin()
p2 <- qplot(data=diamonds, x=price, binwidth=.01, fill=I(c("#00688B", "#FFFFFF", "#FFFFFF"))) +
scale_x_continuous(trans=log_trans())
grid.arrange(p1,p2)
p2 <- qplot(data=diamonds, x=price, binwidth=.01, fill=c("#00688B", "#FFFFFF", "#FFFFFF")) +
scale_x_continuous(trans=log_trans())
grid.arrange(p1,p2)
p2 <- qplot(data=diamonds, x=price, binwidth=.01, color=c("#00688B", "#FFFFFF", "#FFFFFF")) +
scale_x_continuous(trans=log_trans())
grid.arrange(p1,p2)
?color
cuberoot_trans <- function() trans_new(name = "cuberoot",
transform = function(x) x^(1/3),
inverse = function(x) x^3)
cuberoot_trans <- function() trans_new(name = "cuberoot",
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data=diamonds) +
geom_point() +
scale_x_continuous(trans=cuberoot_trans(), limits = c(.2, 3),
breaks = seq(.2,.5,1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits = c(350,15000),
breaks = seq(350,1000,5000,10000,15000)) +
ggtitle("log10 price vs. carat cuberoot")
cuberoot_trans <- function() trans_new(name = "cuberoot",
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data=diamonds) +
geom_point() +
scale_x_continuous(trans=cuberoot_trans(), limits = c(.2, 3),
breaks = c(.2,.5,1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits = c(350,15000),
breaks = c(350,1000,5000,10000,15000)) +
ggtitle("log10 price vs. carat cuberoot")
ggplot(aes(carat, price), data=diamonds) +
geom_point() +
scale_x_continuous(trans=cuberoot_trans(), limits = c(.2, 3),
breaks = c(.2,.5,1,2,3)) +
scale_y_continuous(trans=log10_trans(), limits = c(350,15000),
breaks = c(350,1000,5000,10000,15000)) +
ggtitle("log10 price vs. carat cuberoot")
ggplot(aes(carat, price), data=diamonds) +
geom_point() +
scale_y_continuous(trans=log10_trans(), limits = c(350,15000),
breaks = c(350,1000,5000,10000,15000)) +
ggtitle("log10 price vs. carat cuberoot")
ggplot(aes(carat, price), data=diamonds) +
geom_point() +
scale_y_continuous(trans=log10_trans(), limits = c(350,15000),
breaks = c(350,1000,5000,10000,15000)) +
ggtitle("log10(price) vs. carat")
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=.5, size=.75, position="jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
geom_jitter(alpha=.5, size=.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=.5, size=.75, position = "jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha=.5, size=.75) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div', color=clarity,
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color=clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://github.com/SolomonMg/diamonds-data/blob/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA/eda-course-materials/BigDiamonds.Rda")
load("BigDiamonds.Rda"))
load("BigDiamonds.Rda")
load("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA/eda-course-materials/BigDiamonds.Rda")
load("BigDiamonds.Rda")
getwd()
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA/eda-course-materials")
load("BigDiamonds.Rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == "GIA"])
m1 <- lm(I(log(price)) ~ I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == "GIA",])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
library(memisc)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
View(modelEstimate)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == "GIA",])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(modelEstimate)
