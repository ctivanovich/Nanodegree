mystery == 11
udacious[mystery == 11]
data(mtcars)
mtcars
mtcars.fields
mtcards.names
mtcards[1]
mtcars[1]
mtcars[,1]
names(mtcars)
mean(mtcars$mpg)
?trim
??trim
mean(1:10, trim=1)
mean(1:10)
mean(1:10, trim=.1)
mean(1:10, trim=.100)
mean(1:10, trim=3)
mean(c(1,2,-1))
mean(c(1,2,-1), trim=.1)
mean(c(1,2,-1), trim=.10)
mean(c(1,2,-1), trim=1)
mean(c(1,2,-1), trim=0.1)
mean(c(1,2,-1), trim=3)
mean(c(1,2,-1), trim=0.66)
```{r}
{r}
summary(mtcars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23]
efficient <- mtcars[,mtcars$mpg >= 23]
efficient <- mtcars[:,mtcars$mpg >= 23]
efficient <- subset(mtcars, mpg >= 23)
dim(efficient)
dim(efficient)[1,1]
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
efficient
length(efficient)
nrows(efficient)
row(efficient)
nrow(efficient)
mtcars[mtcars$qsec <= 16.90]
mtcars[mtcars$qsec <= 16.90,]
lightCars <- mtcars[mtcars$wt < 2.000,'qsec']
lightCars
)
lightCars <- mtcars[mtcars$wt < 2.000,]
nrow(lightCars)
lightCars
mtcars$year <- 1974
View(mtcars)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient[,1]
index(mtcars)
names(x = mtcars)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
row.names(efficient)
efficient <- subset(mtcars, mpg >= 30 | hp < 60)
row.names(efficient)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
ggsave("diamonds_center_hist.jpeg")
quit(save=T)
.libPaths()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
.libPaths()
.libPaths(new = "C:/Program Files/R/R-3.2.2/library")
.libPaths()
?library
update.packages("R")
.libPaths()
.libPaths("C:/Program Files/R/R-3.2.2/library")
library("acepack", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("chron", lib.loc="C:/Program Files/R/R-3.1.3/library")
remove.packages("chron", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("acepack", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("bitops", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("colorspace", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("crayon", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("curl", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("data.table", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("dichromat", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("devtools", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("digest", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("evaluate", lib="C:/Program Files/R/R-3.1.3/library")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
data(diamonds)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram() +
facet_wrap(~color)
?cut
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price))) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
View(diamonds)
ggplot(data=diamonds, aes(x=log(price), y=table) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_histogram(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=log(price), y=table)) +
geom_point(aes(color=cut))
table(diamonds)
table(diamonds$color)
table(diamonds$price)
ggplot(data=diamonds, aes(x=price, y=table)) +
geom_point(aes(color=cut))
table(diamonds$cut)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue")
)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), Strok = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = "blue")
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 4)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 10)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), stroke = 1)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~year)
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(. ~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cyl .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cyl .)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
# Chunk 1: set Global
knitr::opts_chunk$set(echo = F, warning = F, message = F, fig.width = 7, fig.align = "center", out.width = "80%")
# Chunk 2: loading libraries and data
library(tidyverse)
library(gridExtra)
library(choroplethr)
library(data.table)
options(width = 120)
setwd("c:/users/christopher/desktop/nanodegree/p4-eda/eda project")
loans <- read.csv("prosperLoanData.csv", na.strings=c("",".","NA"))
loans_sub <- loans[,c("ProsperScore","ProsperRating..Alpha.","BorrowerAPR",
"BorrowerRate", "LenderYield", "LoanStatus", "Occupation",
"EmploymentStatus","IsBorrowerHomeowner","IncomeRange",
"StatedMonthlyIncome","DebtToIncomeRatio", "MonthlyLoanPayment",
"LoanOriginalAmount", "AmountDelinquent",
"AvailableBankcardCredit", "BorrowerState",
"ProsperPrincipalOutstanding")]
attach(loans_sub)
# Chunk 3: Data Structure
str(loans_sub)
# Chunk 4
#we make a data.table for easy joining with the state data set
state_totals <- data.table(group_by(loans_sub, BorrowerState) %>%
dplyr::summarize(total = sum(LoanOriginalAmount)))
state_totals <- state_totals[!is.na(state_totals$BorrowerState),] #removing the NA row
state_totals <- state_totals[-8,] #removing DC, which is too difficult to convert
# joining a state name column on a common name for the abb column
names(state_totals)[1:2] <- c("state.abb","value")
state_totals <- inner_join(state_totals, data.table(state.name, state.abb))
names(state_totals)[3] <- c("region")
state_totals$region <- tolower(state_totals$region)
#Make the map
state_choropleth(state_totals, title = "Outstanding Prosper Loan TOtals by State", legend = "Loan Totals in USD", num_colors = 1)
#because the chloroplethr package masks dplyr, we unload it to avoid conflicts later
#we also drop data.table just 'cuz
unloadNamespace(choroplethr)
unloadNamespace(data.table)
# Chunk 5
na_count <-sapply(loans_sub, function(y) sum(length(which(is.na(y)))))
data.frame(na_count)
#NA counting lambda code courtesty of Stack Overflow:
# https://stackoverflow.com/questions/24027605/determine-the-number-of-na-values-in-a-column
# Chunk 6: PropserScores Hist
q1 <- qplot(data=loans_sub, x=ProsperScore, geom = "bar")
q2 <- qplot(data=loans_sub, x=ProsperRating..Alpha., geom="bar")
grid.arrange(q1, q2, ncol=1)
# Chunk 7: DebtIncomeRatio
ggplot(data=loans_sub, aes(x=DebtToIncomeRatio)) +
geom_histogram(binwidth=.01)
# Chunk 8
summary(loans_sub[which(loans_sub$DebtToIncomeRatio==10.01),]
[,c("ProsperScore","ProsperRating..Alpha.", "IncomeRange",
"StatedMonthlyIncome","DebtToIncomeRatio", "MonthlyLoanPayment",
"LoanOriginalAmount")])
# Chunk 9
nrow(loans_sub[which(loans_sub$DebtToIncomeRatio>=10.01),])
# Chunk 10
ggplot(data=loans_sub, aes(x=DebtToIncomeRatio)) +
geom_histogram(binwidth=.01) +
coord_cartesian(xlim=c(0.1, 1.0))
# Chunk 11
sort(table(subset(loans_sub, DebtToIncomeRatio>10)$IncomeRange),decreasing = T)
# Chunk 12
ggplot(data=loans_sub, aes(x=IncomeRange)) +
geom_bar(fill="grey")
# Chunk 13
ggplot(data=loans_sub) +
geom_histogram(aes(x=BorrowerRate), binwidth=.01) +
xlim(c(0.0, 0.4))
# Chunk 14
poor_saps <- subset(loans_sub, BorrowerRate >= 0.31 & BorrowerRate <=0.32)
summary(poor_saps[c("ProsperRating..Alpha.", "StatedMonthlyIncome", "BorrowerRate", "LenderYield", "LoanStatus")])
# Chunk 15
ggplot(data=loans_sub) + geom_histogram(aes(x=StatedMonthlyIncome), binwidth=1000) +
xlim(c(0, 35000))
# Chunk 16
ggplot(data=loans_sub) +
geom_histogram(aes(x=ProsperScore), stat="count") +
facet_wrap(~ ProsperRating..Alpha.)
# Chunk 17
table(ProsperScore, ProsperRating..Alpha.)
# Chunk 18: Interest Types over Rating
ggplot(data=subset(loans_sub, !is.na(ProsperRating..Alpha.)),
aes(x=BorrowerRate, y=BorrowerAPR)) +
geom_smooth(aes(color=ProsperRating..Alpha.))
# Chunk 19
ggplot(data=subset(loans_sub, !is.na(ProsperRating..Alpha.)),
aes(x=BorrowerRate, y=BorrowerAPR)) +
geom_smooth() +
geom_point(alpha=1/100, color = "red") +
facet_wrap(~ProsperRating..Alpha.)
# Chunk 20: Interest Rate:APR Ratio
loans_sub$Interest_Rate_to_APR <- BorrowerRate / BorrowerAPR
loans_sub$APR_to_Interest_Rate <- BorrowerAPR / BorrowerRate
ggplot(data=loans_sub,aes(x=APR_to_Interest_Rate)) +
geom_histogram(bins=100) +
xlim(c(1, 1.5))
# Chunk 21
p1 <-  ggplot(data=loans_sub, aes(x = APR_to_Interest_Rate, y=StatedMonthlyIncome)) +
geom_smooth(method="lm") +
xlim(c(1, 1.5)) +
facet_wrap(~IsBorrowerHomeowner)
p2 <- ggplot(data=loans_sub, aes(x=APR_to_Interest_Rate, y=LoanOriginalAmount)) +
geom_smooth(method="lm") +
xlim(c(1, 1.5)) +
facet_wrap(~IsBorrowerHomeowner)
grid.arrange(p1,p2, ncol = 1)
# Chunk 22
lm(LoanOriginalAmount + 5000 ~ APR_to_Interest_Rate,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest_Rate)))
lm(StatedMonthlyIncome ~ APR_to_Interest_Rate,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest_Rate)))
pf <- read.csv("pseudo_facebook.tsv", header = T, sep = "\t")
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA/eda-course-materials")
pf <- read.csv("pseudo_facebook.tsv", header = T, sep = "\t")
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) +
geom_boxplot() + stat_summary(fun.y = mean, geom = 'point', shape=4)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color=gender), stat = "summary", fun.y = median)
p1 <-  ggplot(data=loans_sub, aes(x = APR_to_Interest_Rate, y=StatedMonthlyIncome)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
grid.arrange(p1,p2, ncol = 1)
p2 <- ggplot(data=loans_sub, aes(x=APR_to_Interest_Rate, y=LoanOriginalAmount)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
grid.arrange(p1,p2, ncol = 1)
p2 <- ggplot(data=loans_sub, aes(x=APR_to_Interest_Rate, y=LoanOriginalAmount)) +
geom_line(aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
grid.arrange(p1,p2, ncol = 1)
p2 <- ggplot(data=loans_sub, aes(x=APR_to_Interest_Rate, y=LoanOriginalAmount)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
grid.arrange(p1,p2, ncol = 1)
pf.fc_by_age_gender <- group_by(pf, age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender <- group_by(pf, age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender <- dplyr::group_by(pf, age, gender) %>%
summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender <- dplyr::group_by(pf, age, gender) %>%
dplyr::summarize(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
ggplot(aes(x = age, y = median_friend_count),
data = subset(pf.fc_by_age_gender, !is.na(gender))) +
geom_line(aes(color=gender))
View(pf.fc_by_age_gender)
lm(LoanOriginalAmount + 5000 ~ APR_to_Interest_Rate,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest_Rate)))
lm(StatedMonthlyIncome ~ APR_to_Interest_Rate,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest_Rate)))
p1 <-  ggplot(data=loans_sub, aes(x = APR_to_Interest_Rate, y=StatedMonthlyIncome)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
p2 <- ggplot(data=loans_sub, aes(x=APR_to_Interest_Rate, y=LoanOriginalAmount)) +
geom_smooth(method="lm", aes(color=IsBorrowerHomeowner)) +
xlim(c(1, 1.5))
grid.arrange(p1,p2, ncol = 1)
lm(LoanOriginalAmount ~ APR_to_Interest_Rate,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest_Rate)))
lm(StatedMonthlyIncome ~ APR_to_Interest_Rate,
data=subset(loans_sub, IsBorrowerHomeowner == "True" & !is.infinite(APR_to_Interest_Rate)))
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_samp[, c(1:5)]
View(loans_samp)
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_samp[, c(2:7)]
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(2:7)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_samp[, c(2:6)]
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(2:6)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(3:6, 8:11)]
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(3:5, 8:11)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
?ggpairs
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
legend.position = "diagonal")
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(5, 8:11, 20)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
legend.position = "diagonal")
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
legend(legend.position = "diagonal")
```
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
ggpairs(loans_samp,
lower = list(discrete = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
View(loans)
loans_sub <- loans[,c("ProsperScore","ProsperRating..Alpha.","BorrowerAPR",
"BorrowerRate", "LenderYield", "CreditScoreRangeUpper",
"LoanStatus", "IsBorrowerHomeowner","IncomeRange",
"StatedMonthlyIncome","DebtToIncomeRatio", "MonthlyLoanPayment",
"LoanOriginalAmount", "AmountDelinquent", "BorrowerState",
"ProsperPrincipalOutstanding")]
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(2:6, 8:10)]
ggpairs(loans_samp,
lower = list(discrete = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
warnings()
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(2, 5, 8:10, 11:16)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(2, 5, 8:10, 11:14, 16)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(5:6, 8:10, 11:14, 16)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_sub$Interest_Rate_to_APR <- BorrowerRate / BorrowerAPR
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 10000), ]
loans_samp <- loans_samp[, c(5:6, 8, 11:14, 16, 17)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_samp <- loans_sub[sample(1:length(loans_sub$ProsperScore), 1000), ]
loans_samp <- loans_samp[, c(5:6, 8, 11:14, 16, 17)]
ggpairs(loans_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
loans_sub[StatedMonthlyIncome > 10000]
loans_sub[loans_sub$StatedMonthlyIncome > 10000]
loans_sub[, loans_sub$StatedMonthlyIncome > 10000]
loans_sub[loans_sub$StatedMonthlyIncome > 10000,]
mean(loans_sub[loans_sub$StatedMonthlyIncome > 10000,]$CreditScoreRangeUpper)
mean(loans_sub[loans_sub$StatedMonthlyIncome > 10000,]$CreditScoreRangeUpper, na.rm = T)
max(loans_sub$CreditScoreRangeUpper)
max(loans_sub$CreditScoreRangeUpper, na.rm=T)
median(loans_sub[loans_sub$StatedMonthlyIncome > 10000,]$CreditScoreRangeUpper, na.rm = T)
median(loans_sub[loans_sub$StatedMonthlyIncome > 100000,]$CreditScoreRangeUpper, na.rm = T)
mean(loans_sub[loans_sub$StatedMonthlyIncome > 100000,]$CreditScoreRangeUpper, na.rm = T)
