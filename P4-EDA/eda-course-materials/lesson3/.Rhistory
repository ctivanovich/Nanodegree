install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
bye()
install_from_swirl("Data Analysis")
install_from_swirl("Statistical Inference")
install.packages("Using R")
install.packages("UsingR")
library(UsingR)
?father.son
father.son
?data.frame
father.son(row.names(1))
father.son.names
father.son[1,]
?linreg
?reg
?lr
library(swirld)
library(swirl)
swirl()
range(cars$price)
61.9-7.4
var(cars)
var(cars)$price
var(cars$price)
sd(cars$price)
15
20
plo(child~parent, galton)
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
regrline <- lm(child~parent,galton)
abline(regrline, lwd = 3, col = 'red')
summary(regrline)
bye()
exit()
quit()
father.sons
father.son
fathers.sons
library("UsingR")
movies
father.son
tallsons <- father.son$fheight[>71.0]
tallsons <- subset(father.son$fheight > 71.0)
tallsons <- subset(father.son, fheight > 71.0)
tallsons
tallsons <- subset(father.son, fheight == round(71))
tallsons
tallsons <- subset(father.son, round(fheight) == (71))
tallsons
mean(tallsons$fheight)
mean(tallsons$sheight)
tallfathers <- subset(father.son, round(fheight) == (71))
rm(tallsons)
galton
galton
galton[1,]
?galton
data(father.son)
father.son
?promise
quit()
install.packages("rafalib")
install.packages("Rtools")
install.packages("devtools")
library('devtools')
install.packages("Rtools")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
library("swirl")
swirl()
install.packages(c("BH", "boot", "class", "cluster", "crayon", "curl", "DBI", "devtools", "dplyr", "evaluate", "foreign", "ggplot2", "git2r", "gridExtra", "gtable", "HistData", "Hmisc", "httr", "installr", "jsonlite", "latticeExtra", "lazyeval", "MASS", "Matrix", "mgcv", "mime", "munsell", "nlme", "nnet", "openssl", "plyr", "Rcpp", "RCurl", "rstudioapi", "scales", "spatial", "stringi", "survival", "swirl", "testthat", "withr", "xml2"))
install.packages(c("boot", "class", "cluster", "foreign", "MASS", "Matrix", "mgcv", "nlme", "nnet", "spatial", "survival"))
quit()
libraries("swirl")
library("swirl")
rm(list=ls())
swirl()
quit()
install.packages(c("boot", "class", "cluster", "curl", "DBI", "digest", "foreign", "jsonlite", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "R6", "Rcpp", "rversions", "spatial", "stringr", "survival", "tibble"))
update.packages()
download.packages("Microsoft Open R")
download.packages("Microsoft Open R", destdir= "C:\Users\Christopher\AppData\Local\Temp\RtmpuAG1rb\downloaded_packages")
download.packages(pkg="Microsoft Open R", destdir= "C:\Users\Christopher\AppData\Local\Temp\RtmpuAG1rb\downloaded_packages")
update.packages()
quit()
install.packages("ggplot2")
update.packages()
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
install.packages('RColorBrewer', dependencies = TRUE)
library(RColorBrewer)
update.packages(ask = False)
update.packages(ask = false)
update.packages(ask = FALSE)
library()
install.packages('swirl')
.libPaths()
.Library
remove.packages()
remove.packages('tools')
swirl()
library(swirl)
swirl()
swirl()
install_course('Getting and Cleaning Data')
install_course('Statistical Inference')
mean(cars$mpgCity)
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
udacious
numbers <- c(1:10)
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", "YOUR_NAME")
mystery = nchar(udacious)
mystery
mystery == 11
udacious[mystery == 11]
data(mtcars)
mtcars
mtcars.fields
mtcards.names
mtcards[1]
mtcars[1]
mtcars[,1]
names(mtcars)
mean(mtcars$mpg)
?trim
??trim
mean(1:10, trim=1)
mean(1:10)
mean(1:10, trim=.1)
mean(1:10, trim=.100)
mean(1:10, trim=3)
mean(c(1,2,-1))
mean(c(1,2,-1), trim=.1)
mean(c(1,2,-1), trim=.10)
mean(c(1,2,-1), trim=1)
mean(c(1,2,-1), trim=0.1)
mean(c(1,2,-1), trim=3)
mean(c(1,2,-1), trim=0.66)
```{r}
{r}
summary(mtcars)
summary(mtcars)
efficient <- mtcars[mtcars$mpg >= 23]
efficient <- mtcars[,mtcars$mpg >= 23]
efficient <- mtcars[:,mtcars$mpg >= 23]
efficient <- subset(mtcars, mpg >= 23)
dim(efficient)
dim(efficient)[1,1]
dim(efficient)
subset(mtcars, mpg > 30 & hp > 100)
subset(mtcars, mpg < 14 | disp > 390)
efficient
length(efficient)
nrows(efficient)
row(efficient)
nrow(efficient)
mtcars[mtcars$qsec <= 16.90]
mtcars[mtcars$qsec <= 16.90,]
lightCars <- mtcars[mtcars$wt < 2.000,'qsec']
lightCars
)
lightCars <- mtcars[mtcars$wt < 2.000,]
nrow(lightCars)
lightCars
mtcars$year <- 1974
View(mtcars)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$year <- c(1973, 1974)
View(mtcars)
mtcars <- subset(mtcars, select = -year)
mtcars$wt
cond <- mtcars$wt < 3
cond
mtcars$weight_class <- ifelse(cond, 'light', 'average')
mtcars$weight_class
cond <- mtcars$wt > 3.5
mtcars$weight_class <- ifelse(cond, 'heavy', mtcars$weight_class)
mtcars$weight_class
rm(cond)
rm(efficient)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages('knitr', dependencies = T)
library(knitr)
install.packages("knitr", dependencies = T)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
efficient[,1]
index(mtcars)
names(x = mtcars)
efficient <- subset(mtcars, 'mpg' >= 30 | 'hp' < 60)
row.names(efficient)
efficient <- subset(mtcars, mpg >= 30 | hp < 60)
row.names(efficient)
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
ggsave("diamonds_center_hist.jpeg")
quit(save=T)
.libPaths()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"))
.libPaths()
.libPaths(new = "C:/Program Files/R/R-3.2.2/library")
.libPaths()
?library
update.packages("R")
.libPaths()
.libPaths("C:/Program Files/R/R-3.2.2/library")
library("acepack", lib.loc="C:/Program Files/R/R-3.2.2/library")
library("chron", lib.loc="C:/Program Files/R/R-3.1.3/library")
remove.packages("chron", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("acepack", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("bitops", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("colorspace", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("crayon", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("curl", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("data.table", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("dichromat", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("devtools", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("digest", lib="C:/Program Files/R/R-3.1.3/library")
remove.packages("evaluate", lib="C:/Program Files/R/R-3.1.3/library")
# Chunk 1: setup
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA")
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: diamonds
data(diamonds)
summary(diamonds)
# Chunk 3: Prices
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
# Chunk 4: Histograms by Cut
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~cut,scales = "free_y")
# Chunk 5: price/carat faceted by cut
ggplot(data=diamonds, aes(x=log10(price/carat))) +
geom_histogram(binwidth = .05) +
scale_x_continuous() +
facet_wrap(~cut, scales = "free_y")
# Chunk 6: price against color
ggplot(data=diamonds, aes(x=color, y=price)) + geom_boxplot() +
coord_cartesian(ylim=c(0, 8000))
ggplot(data=diamonds, aes(x=carats)) + geom_polygon()
ggplot(data=diamonds, aes(x=carat)) + geom_polygon()
ggplot(data=diamonds, aes(x=carat, y = ..count..)) + geom_polygon()
ggplot(data=diamonds, aes(x=color, y=price)) + geom_boxplot() +
coord_cartesian(ylim=c(0, 8000))
ggplot(data=diamonds, aes(x=carat, y = ..density..)) + geom_polygon()
ggplot(data=diamonds, aes(x=carat, y = ..density..)) + geom_polygon(color=color)
ggplot(data=diamonds, aes(x=carat, y = ..density..)) + geom_polygon(color=color)
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA")
knitr::opts_chunk$set(echo = TRUE)
data(diamonds)
summary(diamonds)
library(ggplot2)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~color)
ggplot(data=diamonds, aes(x=price)) +
geom_histogram(binwidth=100) +
coord_cartesian(xlim=c(0,2750)) +
scale_x_continuous(breaks = seq(0,2750,500)) +
facet_wrap(~cut,scales = "free_y")
ggplot(data=diamonds, aes(x=log10(price/carat))) +
geom_histogram(binwidth = .05) +
scale_x_continuous() +
facet_wrap(~cut, scales = "free_y")
ggplot(data=diamonds, aes(x=color, y=price)) + geom_boxplot() +
coord_cartesian(ylim=c(0, 8000))
ggplot(data=diamonds, aes(x=carat, y = ..density..)) + geom_polygon(color=color)
names(diamonds)
ggplot(data=diamonds, aes(x=carat, y = ..density..)) + geom_polygon(color=diamonds$color)
library(ggplot2)
setwd("C:/Users/Christopher/Desktop/Nanodegree/P4-EDA/eda-course-materials/lesson3")
pfd <- read.csv("pseudo_facebook.tsv", sep = "\t")
ggplot(aes(x = friend_count, y = ..density../sum(..density..)), data = subset(pfd, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Friend Count') +
ylab('Percentage of users with that friend count')
ggplot(data=diamonds, aes(x=carat, y = ..density..)) + geom_polygon(color=diamonds$color)
ggplot(data=diamonds, aes(x=carat, y = c(0, length(diamonds)))) + geom_polygon()
ggplot(data=diamonds, aes(x=carat, y = c(1, length(diamonds)))) + geom_polygon()
ggplot(data=diamonds, aes(x=carat, y = length(diamonds))) + geom_polygon()
ggplot(data=diamonds) + geom_polygon(color=diamonds$carat)
ggplot(data=diamonds) + geom_polygon(aes(color=diamonds$carat))
ggplot(data=diamonds, aes(x=carat, y=..sum..)) + geom_polygon(aes(color=diamonds$carat))
ggplot(data=diamonds, aes(x=carat, y=..sum..)) + geom_polygon(aes(color=carat))
ggplot(data=diamonds, aes(x=carat, y=..count..)) + geom_polygon(aes(color=carat))
ggplot(data=diamonds, aes(x=carat, y=count)) + geom_polygon(aes(color=carat))
ggplot(data=diamonds, aes(carat, count)) + geom_polygon(aes(color=carat))
ggplot(data=diamonds, aes(carat, fill=color)) + geom_polygon()
ggplot(diamonds, aes(price, fill = cut)) +
geom_histogram(binwidth = 500)
ggplot(data=diamonds, aes(carat, fill=color)) + geom_polygon(binwidth=100)
ggplot(diamonds, aes(carat, fill=color)) + geom_polygon(binwidth=100)
ggplot(diamonds, aes(carat, fill=cut)) + geom_polygon(binwidth=100)
ggplot(diamonds, aes(carat, y=..density..)) + geom_polygon(binwidth=100)
ggplot(diamonds, carat) + geom_polygon(binwidth=100)
ggplot(diamonds, aes(carat)) + geom_polygon(binwidth=100)
ggplot(diamonds, aes(carat, ..density.., color=cut)) + geom_polygon(binwidth=100)
ggplot(diamonds, aes(as.factor(carat), ..density.., color=cut)) + geom_polygon(binwidth=100)
ggplot(aes(x = friend_count, y = ..density../sum(..density..)), data = subset(pfd, !is.na(gender))) +
geom_freqpoly(aes(color = gender), binwidth=10) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
xlab('Friend Count') +
ylab('Percentage of users with that friend count')
ggplot(aes(as.factor(carat), ..density.., color=cut), data=diamonds) + geom_polygon(binwidth=100)
str(diamonds$carat)
as.factor(diamonds$carat)
ggplot(aes(carat, ..density.., color=cut), data=diamonds) + geom_polygon(binwidth=.25)
ggplot(aes(carat, ..count.., color=cut), data=diamonds) + geom_polygon(binwidth=.25)
ggplot(diamonds, aes(price, ..density.., colour = cut)) +
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(price, ..density.., colour = color)) +
geom_freqpoly(binwidth = 500)
ggplot(aes(carat, ..count..), data=diamonds) + geom_polygon(binwidth=.25)
ggplot(aes(carat, ..count..), data=diamonds) + geom_polygon(binwidth=.25)
ggplot(aes(carat), data=diamonds) + geom_polygon(binwidth=.25)
ggplot(data=diamonds,aes(carat)) + geom_polygon(binwidth=.25)
ggplot(data=diamonds,aes(as.factor(carat))) + geom_polygon(binwidth=.25)
ggplot(data=diamonds,aes(as.factor(carat))) + geom_polygon()
ggplot(data=diamonds,aes(carat, ..density.., color=cut)) + geom_freqpoly()
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.5)
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1)
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1, breaks=seq(0,5,.25))
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1))
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1))
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1)
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(breaks=seq(0,2.5,.1)
)
table(diamonds$carat)
ggplot(data=diamonds,aes(carat)) + geom_freqpoly() + coord_cartesian(xlim=c(0, 2), ylim=c(2000,11000))
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1) + coord_cartesian(xlim=c(0, 2), ylim=c(2000,11000))
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1) + coord_cartesian(xlim=c(0, 2), ylim=c(1900,11000))
ggplot(data=diamonds,aes(carat)) + geom_freqpoly(binwidth=.1) + coord_cartesian(xlim=c(0, 2), ylim=c(1900,11000))
